//////////////////////////////////////////////////////////////
//                                                          //
// Propeller Spin/PASM Compiler                             //
// (c)2012-2016 Parallax Inc. DBA Parallax Semiconductor.   //
// Adapted from Chip Gracey's x86 asm code by Roy Eltham    //
// Rewritten to modern C++ by Thilo Ackermann               //
// See end of file for terms of use.                        //
//                                                          //
////////////////////////////////////////////////////////////// 

#ifndef SPINCOMPILER_ANNOTATIONWRITER_H
#define SPINCOMPILER_ANNOTATIONWRITER_H

#include "SpinCompiler/Types/BinaryAnnotation.h"
#include <string>
#include <vector>

struct AnnotationWriter {
    AnnotationWriter(const std::vector<unsigned char> &binary, const std::vector<BinaryAnnotation> &annotation):binary(binary),annotation(annotation) {}
    const std::vector<unsigned char> &binary;
    const std::vector<BinaryAnnotation> &annotation;
    std::vector<unsigned char> result;

    void generateJSON() {
        append("{");
        appendNextLine("    \"info\": \"Generated by openspin\",");
        appendNextLine("    \"binary\": [");
        for (unsigned i=0; i<binary.size(); ++i) {
            appendComma(i,0x1F,"        ");
            append(std::to_string(int(binary[i]&0xFF)));
        }
        append("],");
        appendNextLine("    \"annotation\": [");
        for (unsigned i=0; i<annotation.size(); ++i) {
            appendComma(i,0x7,"        ");
            append("[");
            append(std::to_string(annotation[i].type));
            append(", ");
            append(std::to_string(annotation[i].size));
            if (auto tbl = std::dynamic_pointer_cast<BinaryAnnotation::TableEntryNames>(annotation[i].extraInfo)) {
                append(", [");
                for (unsigned j=0; j<tbl->names.size(); ++j) {
                    appendComma(j,0x7,"            ");
                    append("\"");
                    append(tbl->names[j]);
                    append("\"");
                }
                append("]");
            }
            else if (auto dat = std::dynamic_pointer_cast<BinaryAnnotation::DatAnnotation>(annotation[i].extraInfo)) {
                append(", [");
                for (unsigned j=0; j<dat->entries.size(); ++j) {
                    appendComma(j,0xF,"            ");
                    append("[");
                    append(std::to_string(dat->entries[j].type));
                    append(", ");
                    append(std::to_string(dat->entries[j].value));
                    append("]");
                }
                append("]");
            }
            append("]");
        }
        append("]");
        appendNextLine("}");
        appendNextLine("");
    }
private:
    void append(const std::string& str) {
        result.insert(result.end(),str.begin(),str.end());
    }
    void appendNextLine(const std::string& str) {
        result.push_back('\n');
        append(str);
    }
    void appendComma(unsigned i, unsigned mask, const char* indent) {
        if (i==0)
            return;
        result.push_back(',');
        if ((i&mask) == 0)
            appendNextLine(indent);
        else
            result.push_back(' ');
    }
};

#endif //SPINCOMPILER_ANNOTATIONWRITER_H

///////////////////////////////////////////////////////////////////////////////////////////
//                           TERMS OF USE: MIT License                                   //
///////////////////////////////////////////////////////////////////////////////////////////
// Permission is hereby granted, free of charge, to any person obtaining a copy of this  //
// software and associated documentation files (the "Software"), to deal in the Software //
// without restriction, including without limitation the rights to use, copy, modify,    //
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to    //
// permit persons to whom the Software is furnished to do so, subject to the following   //
// conditions:                                                                           //
//                                                                                       //
// The above copyright notice and this permission notice shall be included in all copies //
// or substantial portions of the Software.                                              //
//                                                                                       //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,   //
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A         //
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT    //
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     //
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE        //
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                //
///////////////////////////////////////////////////////////////////////////////////////////
